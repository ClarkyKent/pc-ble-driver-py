
trigger:
- master
- release/*

parameters:
  - name: VCPKG_COMMIT
    displayName: VCPKG commit
    type: string
    default: 38e1a6465beeb7b294a584d1c4ec24b2daab2670
    values:
    - master
    - 38e1a6465beeb7b294a584d1c4ec24b2daab2670
    - 2020.07
    - 2020.06
    - 2020.04
    - 2020.01
    - 2019.12
    - 2019.11
    - 2019.10
    - 2019.09
    - 2019.08
    - 2019.07
    - 2019.06
  - name: BuildLinux
    displayName: Build Linux 
    type: boolean
    default: false 
  - name: BuildWindows
    displayName: Build Windows 
    type: boolean
    default: false
  - name: BuildMacOS
    displayName: Build macOS 
    type: boolean
    default: false


  - name: TestLinux
    displayName: Test Linux 
    type: boolean
    default: false 
  - name: TestWindows
    displayName: Test Windows 
    type: boolean
    default: false
  - name: TestMacOS
    displayName: Test macOS 
    type: boolean
    default: false


  - name: nodeVersion
    displayName: "Node version"
    type: string 
    default: 12.13.0


  - name: pythonVersions
    displayName: "Python versions"
    type: object
    default:
      - 3.6
      # - 3.8
      # - 3.9
variables:
  VCPKG_REPOSITORY: https://github.com/Microsoft/vcpkg.git

jobs:
  # Linux
  - job: Linux
    condition: eq(${{parameters.BuildLinux}}, 'true')
    variables:
      wheel_platform: 'manylinux2010_x86_64'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: 'Build ManyLinux wheel'
      inputs:
        containerRegistry: acr-nrfprivateeu
        command: run
        arguments: '--rm -e PLAT=$(wheel_platform) -v $(System.DefaultWorkingDirectory):/data nrfwayland.azurecr.io/nrf/projects-pc-ble-driver-py-linux:v6 /build/build-wheels.sh'
    - bash: |
        set -o errexit -o pipefail
        ls -R wheelhouse
        cp --verbose -R wheelhouse/*.whl "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy wheels'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-ble-driver-py'
        action: 'edit'
        tagSource: 'Git tag'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: 'true'
        addChangeLog: 'false'
      condition: ne(variables['Build.Reason'], 'PullRequest')
    
    - script: |
        echo "Displaying exported artifacts" 
        dir "$(Build.ArtifactStagingDirectory)"
        echo -------------------------------- 
      displayName: Show artifacts 
    - task: PublishPipelineArtifact@1
      inputs:
        path: "$(Build.ArtifactStagingDirectory)"
        artifact: artifact-py-$(wheel_platform)

  # macOS
  - job: macOS
    condition: eq(${{parameters.BuildMacOS}}, 'true')
    variables:
      VCPKG_ROOT: '$(Agent.HomeDirectory)/vcpkg'
      python_arch: 'x64'
    strategy:
      matrix:
        py36:
          python_version: '3.6.8'
          python_bin: '3.6'
        py37:
          python_version: '3.7.5'
          python_bin: '3.7'
        py38:
          python_version: '3.8.0'
          python_bin: '3.8'
    pool:
      vmImage: 'macos-10.15'
    steps:
    - script: |
        set -o errexit -o pipefail
        ls /Applications
        sudo xcode-select -s /Applications/Xcode_11.7.app
      displayName: 'Install XCode'
    - script: |
        brew install swig gcc@9
      displayName: 'Install gcc and swig'
    - script: |
        set -o errexit -o pipefail
        git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT)
        git -C $(VCPKG_ROOT) checkout ${{ parameters.VCPKG_COMMIT }}
        CC=gcc-9 CXX=g++-9 $(VCPKG_ROOT)/bootstrap-vcpkg.sh
      displayName: 'Install vcpkg'
    - script: |
        set -o errexit -o pipefail
        export PATH=$VCPKG_ROOT:$PATH
        export VCPKG_OSX_DEPLOYMENT_TARGET=10.9
        vcpkg install nrf-ble-driver:$(python_arch)-osx
      displayName: 'Install nrf-ble-driver'
    - bash: |
        set -o errexit -o pipefail
        wget https://www.python.org/ftp/python/$(python_version)/python-$(python_version)-macosx10.9.pkg
        sudo installer -pkg python-$(python_version)-macosx10.9.pkg -target /
      displayName: 'Install all pythons'
    - bash: |
        set -o errexit -o pipefail
        rm -rf _skbuild
        pypath=`which python$(python_bin)`
        ${pypath} -m pip install -r requirements-dev.txt
        ${pypath} setup.py bdist_wheel --build-type Release -- -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9
      displayName: 'Build for python$(python_bin)'
    - bash: |
        cp -R dist/*.whl "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy artifacts'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-ble-driver-py'
        action: 'edit'
        tagSource: 'Git tag'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: 'true'
        addChangeLog: 'false'
      condition: ne(variables['Build.Reason'], 'PullRequest')
    - task: PublishPipelineArtifact@1
      inputs:
        path: "$(Build.ArtifactStagingDirectory)"
        artifact: artifact-py-$(python_bin)-$(python_arch)-macOS

  # Windows
  - job: Windows
    condition: eq(${{parameters.BuildWindows}}, 'true')
    variables:
      VCPKG_ROOT: '$(Agent.HomeDirectory)\vcpkg'
    strategy:
      matrix:
        py36_win64:
          python_version: '3.6'
          python_lib: '36'
          python_arch: "x64"
          generator: 'Visual Studio 15 2017 Win64'
        py36_win32:
          python_version: '3.6'
          python_lib: '36'
          python_arch: "x86"
          generator: 'Visual Studio 15 2017'
        py37_win64:
          python_version: '3.7'
          python_lib: '37'
          python_arch: "x64"
          generator: 'Visual Studio 15 2017 Win64'
        py37_win32:
          python_version: '3.7'
          python_lib: '37'
          python_arch: "x86"
          generator: 'Visual Studio 15 2017'
        py38_win64:
          python_version: '3.8'
          python_lib: '38'
          python_arch: "x64"
          generator: 'Visual Studio 15 2017 Win64'
        py38_win32:
          python_version: '3.8'
          python_lib: '38'
          python_arch: "x86"
          generator: 'Visual Studio 15 2017'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        choco install -y --x86 swig
      displayName: 'Install toolchain on Windows'
    - script: |
        git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT)
        git -C $(VCPKG_ROOT) checkout ${{ parameters.VCPKG_COMMIT }}
        $(VCPKG_ROOT)\bootstrap-vcpkg.bat
      displayName: 'Install vcpkg'
    - script: |
        set PATH=$(VCPKG_ROOT);%PATH%
        vcpkg install nrf-ble-driver:$(python_arch)-windows
      displayName: 'Install nrf-ble-driver'
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python_version)'
        architecture: $(python_arch)
    - bash: |
        set -o errexit -o pipefail
        rm -rf _skbuild
        pypath=`which python`
        pyroot=`dirname ${pypath}`
        pyheader=`ls ${pyroot}/include/Python.h`
        pyincldir=`dirname ${pyheader}`
        pylib=`ls ${pyroot}/libs/python$(python_lib).lib`
        pip install -r requirements-dev.txt
        python setup.py bdist_wheel --build-type Release -- -DPYTHON_INCLUDE_DIR=${pyincldir} -DPYTHON_LIBRARY=${pylib} -G "$(generator)"
      displayName: 'Build for python $(python_version)'
    - bash: |
        for f in dist/*; do mv "${f}" "${f/cp38m/cp38}"; done;
        cp -R dist/*.whl "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy artifacts'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-ble-driver-py'
        action: 'edit'
        tagSource: 'Git tag'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: 'true'
        addChangeLog: 'false'
      condition: ne(variables['Build.Reason'], 'PullRequest')
    - task: PublishPipelineArtifact@1
      inputs:
        path: "$(Build.ArtifactStagingDirectory)"
        artifact: artifact-py-$(python_lib)-$(python_arch)-windows





  - job: TriggerTest

    condition: and( eq(${{parameters.BuildMacOS}}, 'true'), eq(${{parameters.BuildWindows}}, 'true'))
    dependsOn: [
      Windows,
      Linux,
      macOS,
    ]
    strategy:
      matrix:
        linux:
          osType: 'linux'
        mac:
          osType: 'mac'
        win64:
          osType: 'win64'
        win32:
          osType: 'win32'
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: 'Trigger test (check test result on Jenkins)'
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'waylandJenkins'
        method: 'POST'
        urlSuffix: 'view/pc-ble-driver-py/job/pc-ble-driver-py-$(osType)/buildWithParameters?BRANCH=$(Build.SourceBranch)&VSTS_URL=$(system.CollectionUri)&TOKEN=$(system.AccessToken)&PROJECT_ID=$(system.teamProjectId)&HUB_NAME=$(system.hostType)&PLAN_ID=$(system.planId)&TASK_ID=$(system.taskInstanceId)&JOB_ID=$(system.jobId)'
        waitForCompletion: 'false'
      condition: ne(variables['Build.Reason'], 'PullRequest')









  # Run tests
  - job: TestLinux

    # condition: eq(${{parameters.BuildLinux}}, 'true')

    variables:
      wheel_platform: 'manylinux2010_x86_64'
    dependsOn: [
      Linux,
    ]

 
    strategy:
      matrix:
        linux:
          osType: 'linux'

    pool:
      name: test-pool-onv12-1      
      demands: Agent.OS -equals Linux
    steps:

      - template: .azure-pipelines/run-tests-linux.yml
        parameters:
          pythonVersions: ${{ parameters.pythonVersions }}
          artifact: "artifact-py-$(wheel_platform)"
          package_name: pc_ble_driver_py-0.15.1-cp36-cp36m-manylinux2010_x86_64.whl
          nodeVersion: ${{ parameters.nodeVersion }} 
          arch: 64


  - job: TestLinuxOldBuild

    condition: eq(${{parameters.TestLinux}}, 'true')

    variables:
      wheel_platform: 'manylinux2010_x86_64'
#    dependsOn: [
#      Linux,
#    ]
#
 
    strategy:
      matrix:
        linux:
          osType: 'linux'

    pool:
      name: test-pool-onv12-1      
      demands: Agent.OS -equals Linux
    steps:

      - template: .azure-pipelines/run-tests-linux.yml
        parameters:
          artifact: "artifact-py-$(wheel_platform)"
          package_name: pc_ble_driver_py-0.15.1-cp36-cp36m-manylinux2010_x86_64.whl
          nodeVersion: ${{ parameters.nodeVersion }} 
          arch: 64

  - job: TestMacOS

    condition: eq( ${{ parameters.TestMacOS }}, 'true') 

    #  dependsOn: [
    #    MacOS,
    #  ]

    pool:
      name: test-pool-onv12-1
      demands: Agent.OS -equals Darwin 
    steps:

      - template: .azure-pipelines/run-tests-mac.yml
        parameters:
          artifact: artifact-py-$(python_lib)-$(python_arch)-macOS
          package_name: pc_ble_driver_py-0.15.1-cp36-cp36m-manylinux2010_x86_64.whl
          nodeVersion: ${{ parameters.nodeVersion }} 
          arch: 64

  - job: TestWindows


    strategy:
      matrix:
        py36:
          python_version: '3.6.8'
          arch: 64
        py37:
          python_version: '3.7.5'
          arch: 64
        py38:
          python_version: '3.8.0'
          arch: 64

    condition: eq( ${{ parameters.TestWindows }}, 'true') 

    #  dependsOn: [
    #    Windows,
    #  ]

    pool:
      name: test-pool-onv12-1
      demands: Agent.OS -equals Windows_NT
    steps:

      - template: .azure-pipelines/run-tests-windows.yml
        parameters:
          artifact: "artifact-py-$(python_lib)-$(python_arch)-windows"
          package_name: pc_ble_driver_py-0.15.1-cp36-cp36m-manylinux2010_x86_64.whl
          nodeVersion: ${{ parameters.nodeVersion }} 
          arch: $(arch)
          python_version: $(python_version)

