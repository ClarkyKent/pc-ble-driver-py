parameters:
  - name: artifact
    type: string
  # - name: package_name
  #   type: string


  - name: nodeVersion
    displayName: "Node version"
    type: string 
    default: 12.13.0

  - name: python_version
    displayName: "Python versions"
    type: string
    default: 3.6.8
      
  - name: arch
    type: number
    default: 64

steps:
  
  # - bash: |
  #     echo Displaying Python versions in $(Agent.ToolsDirectory)
  #     echo begin---------------------------
  #     ls $(Agent.ToolsDirectory)
  #     echo end-----------------------------
  #   failOnStderr: true 
  #   displayName: Show python versions
    

#  - task: DownloadPipelineArtifact@2
#    inputs:
#     source: current
#     artifact: ${{ parameters.artifact }}

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      pipeline: 5
      buildid: 10595
      # artifact: ${{ parameters.artifact }}
      project: Wayland 
      allowFailedBuilds: true

  - script: | 
          echo display: ls
          dir
          echo display: $(Pipeline.Workspace)
          dir $(Pipeline.Workspace)

          echo Display an artifact directory: $(Pipeline.Workspace)\artifact-py-38-x64-windows\

          dir $(Pipeline.Workspace)\artifact-py-38-x64-windows\



          echo Display the used artifact: $(Pipeline.Workspace)\${{ parameters.artifact }}

          dir $(Pipeline.Workspace)\${{ parameters.artifact }}
    failOnStderr: true 
    displayName: Display artifact directories


  - script: | 
      echo    ${{ parameters.arch }}
      echo    "${{ parameters.arch }}"



      echo ${{ eq('${{ parameters.arch }}', 32) }}
      echo ${{ eq('${{ parameters.arch }}', 64) }}

      echo ${{ eq('${{ parameters.arch }}', '32') }}
      echo ${{ eq('${{ parameters.arch }}', '64') }}

    failOnStderr: true 
    displayName: Trying to understand the derefferenging



  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: x86
    condition: eq( '${{ parameters.arch }}', 32) 

  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: x64
    condition: eq( '${{ parameters.arch }}', 64) 

  - script: | 
      echo "--------" From: $(Pipeline.Workspace)
      dir $(Pipeline.Workspace)
      echo "--------" Install:  $(Pipeline.Workspace)/${{ parameters.artifact }}

      
      python -m pip install --upgrade pip
      echo start run python install artifact 
      python -m pip install --user --force-reinstall  $(Pipeline.Workspace)/${{ parameters.artifact }}
      echo end python install artifact 

    failOnStderr: true 
    displayName: Pip install
  
    


  - ${{ if eq( parameters.arch , 32) }}:
      - template: setup-nodejs-32.yaml
        parameters:
          nodeVersion: ${{ parameters.nodeVersion }}


  - ${{ if ne( parameters.arch , 32) }}:
      - template: setup-nodejs-64.yaml
        parameters:
          nodeVersion: ${{ parameters.nodeVersion }}
          

  - bash: | 
      # Python is 64 bit on the linux servers
      npm install -g  nrf-device-lister
      nrf-device-lister --help
    # failOnStderr: true 
    displayName: npm install


  - bash: |
        ports=(`nrf-device-lister -p PCA10056`) 
        echo "Raw ports 1 : $ports"
        export PORT_A=${ports[0]}
        ports=(`nrf-device-lister -p PCA10040`)
        echo "Raw ports 2 : $ports"
        export PORT_B=${ports[0]}
      
        echo "Port A: ${PORT_A}"
        echo "Port B: ${PORT_B}"

        LOG_LEVEL="debug"
        DRV_LOG_LEVEL="info"
        
        set -e


        python  tests/test_programming.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_ble_common_api.py     --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_rssi.py               --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_connection_update.py  --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_mtu.py                --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_passkey.py            --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_phy_update.py         --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_data_length.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_server_client.py      --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}

    # failOnStderr: true 
    displayName: Jenkins run      
