parameters:
  - name: artifact
    type: string
  - name: package_name
    type: string
  - name: nodeVersions
    displayName: "Node versions"
    type: object

  - name: pythonVersions
    displayName: "Python versions"
    type: object
    default: 
      - 3.6

  - name: arch
    type: string 
    default: x64
steps:
  
  - bash: |
      echo Displaying Python versions in $(Agent.ToolsDirectory)
      echo begin---------------------------
      ls $(Agent.ToolsDirectory)
      echo end-----------------------------
    displayName: Show python versions
    

#  - task: DownloadPipelineArtifact@2
#    inputs:
#     source: current
#     artifact: ${{ parameters.artifact }}

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      pipeline: 5
      buildid: 10550
      # artifact: ${{ parameters.artifact }}
      project: Wayland 
      allowFailedBuilds: true

  - script: | 
          echo display: ls
          dir
          echo display: $(Pipeline.Workspace)
          dir $(Pipeline.Workspace)
    displayName: Display  artifact directories



  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7.4'
      architecture: ${{ parameters.arch }}

  - ${{ each pythonVersion in parameters.pythonVersions }}:
    - bash: | 
        echo "--------" From: $(Pipeline.Workspace)
        ls $(Pipeline.Workspace)
        echo "--------" Install:  ${{ parameters.package_name }}

        
        echo start run python 36 
        python -m pip install --user --force-reinstall  $(Pipeline.Workspace)/pc_ble_driver_py-0.15.1-cp36-cp36m-manylinux2010_x86_64.whl
        echo end python 36


      displayName: Pip install
  
    


  - ${{ each nodeVersion in parameters.nodeVersions }}:
      - ${{ if eq(parameters.arch, "x32") }}:
          - template: setup-nodejs-32.yaml
            parameters:
              nodeVersion: ${{ nodeVersion }}
  - ${{ each nodeVersion in parameters.nodeVersions }}:
      - ${{ if eq(parameters.arch, "x64") }}:
          - template: setup-nodejs-64.yaml
            parameters:
              nodeVersion: ${{ nodeVersion }}
  - bash: | 
      # Python is 64 bit on the linux servers
      npm install -g  nrf-device-lister
      nrf-device-lister --help
    displayName: npm install

  - ${{ each pythonVersion in parameters.pythonVersions }}:
    - bash: |
          ports=(`nrf-device-lister -p PCA10056`) 
          echo "Raw ports 1 : $ports"
          export PORT_A=${ports[0]}
          ports=(`nrf-device-lister -p PCA10040`)
          echo "Raw ports 2 : $ports"
          export PORT_B=${ports[0]}
        
          echo "Port A: ${PORT_A}"
          echo "Port B: ${PORT_B}"

          LOG_LEVEL="debug"
          DRV_LOG_LEVEL="info"
          
          set -e


          python${{ pythonVersion }}  tests/test_programming.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_ble_common_api.py     --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_rssi.py               --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_connection_update.py  --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_mtu.py                --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_passkey.py            --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_phy_update.py         --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_data_length.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
          python${{ pythonVersion }}  tests/test_server_client.py      --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}

      displayName: Jenkins run      
