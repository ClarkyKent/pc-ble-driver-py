parameters:
  - name: artifact
    type: string



  - name: nodeVersion
    displayName: "Node version"
    type: string
    default: 12.13.0

  - name: python_version
    displayName: "Python versions"
    type: string
    default: 3.6.8

  - name: arch
    type: number
    default: 64

steps:



#  - task: DownloadPipelineArtifact@2
#    inputs:
#     source: current
#     artifact: ${{ parameters.artifact }}

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      pipeline: 5
      buildid: 10595
      # artifact: ${{ parameters.artifact }}
      project: Wayland
      allowFailedBuilds: true
      path: $(System.DefaultWorkingDirectory)/local_artifacts

  - powershell: |
          echo " Display .\"
          dir .\
          echo "Display no keyword"
          dir
          echo "Display local artifacts"
          dir .\local_artifacts\
          echo "End display local_artifacts"
          echo "Last attempt at displaying"
          dir $(System.DefaultWorkingDirectory)/local_artifacts
          echo "End of last attempt"
    failOnStderr: true
    displayName: Display artifact directories



  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: x86
    condition: eq( '${{ parameters.arch }}', 32)

  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: x64
    condition: eq( '${{ parameters.arch }}', 64)

  - powershell: |
      echo "--------" From: $(Pipeline.Workspace)
      dir $(Pipeline.Workspace)
      echo "--------" Install:  $(Pipeline.Workspace)/${{ parameters.artifact }}


      python -m pip install --upgrade pip
      echo start run python install artifact
      python -m pip uninstall pc-ble-driver-py
      python -m pip install --user --force-reinstall  $(Pipeline.Workspace)/${{ parameters.artifact }}
      echo end python install artifact

    failOnStderr: true
    displayName: Pip install




  #TODO Select the correct node version
  - template: setup-nodejs-64.yaml
    parameters:
      nodeVersion: ${{ parameters.nodeVersion }}

  - bash: |
      npm install -g  nrf-device-lister
      nrf-device-lister --help
    displayName: npm install

  - bash: |
        ports=(`nrf-device-lister -p PCA10056`)
        echo "Raw ports 1 : $ports"
        export PORT_A=${ports[0]}
        ports=(`nrf-device-lister -p PCA10040`)
        echo "Raw ports 2 : $ports"
        export PORT_B=${ports[0]}

        echo "Port A: ${PORT_A}"
        echo "Port B: ${PORT_B}"

        LOG_LEVEL="debug"
        DRV_LOG_LEVEL="info"

        set -e


        python  tests/test_programming.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_ble_common_api.py     --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_rssi.py               --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_connection_update.py  --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_mtu.py                --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_passkey.py            --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_phy_update.py         --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_data_length.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_server_client.py      --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}

    displayName: Jenkins run
