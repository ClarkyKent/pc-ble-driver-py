parameters:
  - name: artifact_name
    type: string


  - name: package_name
    type: string

  - name: nodeVersion
    displayName: "Node version"
    type: string 
    default: 12.13.0

  - name: python_version
    displayName: "Python versions"
    type: string
    default: 3.6.8
      
  - name: arch
    type: number
    default: 64

steps:
  
   

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: Wayland 
      pipeline: 73
      runVersion: 'specific'
      runId: 10979
      artifact: artifact-py-macOSX
      allowFailedBuilds: true


#  - task: DownloadPipelineArtifact@2
#    inputs:
#     source: current
#     artifact: ${{ parameters.artifact }}

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: Wayland 
      pipeline: 5
      runVersion: 'specific'
      runId: 10595
      artifact: ${{ parameters.artifact_name }}
      allowFailedBuilds: true
      # downloadPath: $(System.DefaultWorkingDirectory)/local_artifacts
      
  - powershell: | 
          echo " Display .\"
          dir .\
          echo "Display no keyword"
          dir
          echo "Display local artifacts"
          dir .\local_artifacts\
          echo "End display local_artifacts"
          echo "Last attempt at displaying"
          dir $(System.DefaultWorkingDirectory)/local_artifacts
          echo "End of last attempt"

          echo Displaying  $(Pipeline.Workspace)
          dir $(Pipeline.Workspace)

    failOnStderr: true 
    displayName: Display artifact directories



  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: x86
    condition: eq( '${{ parameters.arch }}', 32) 

  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: x64
    condition: eq( '${{ parameters.arch }}', 64) 

  - powershell: | 
      echo "--------" From: $(Pipeline.Workspace)
      dir $(Pipeline.Workspace)
      echo "Python ?"
      python --version 
      python -m pip --version
      # echo "Python 3"
      # python3 --version 
      # python3 -m pip --version
      echo "--------" Install:  $(Pipeline.Workspace)/${{ parameters.artifact_name }}
    displayName: Show python versions
  - powershell: |

      python -m pip install --upgrade pip
      
      echo "start run python install artifact"
      python -m pip uninstall -y --quiet --quiet pc-ble-driver-py
      # python -m pip install -r requirements-dev.txt
      python -m pip install  --force-reinstall  $(Pipeline.Workspace)/${{ parameters.package_name }}
      echo "end python install artifact"
    condition: always()
    failOnStderr: true 
    displayName: Pip install
 
    


  - template: unix_setup-nodejs-64.yaml
    parameters:
      nodeVersion: ${{ parameters.nodeVersion }}

  - bash: | 
      npm install -g  nrf-device-lister
      nrf-device-lister --help
    displayName: npm install

  - bash: |
        ports=(`nrf-device-lister -p PCA10056`) 
        echo "Raw ports 1 : $ports"
        export PORT_A=${ports[0]}
        ports=(`nrf-device-lister -p PCA10040`)
        echo "Raw ports 2 : $ports"
        export PORT_B=${ports[0]}
      
        echo "Port A: ${PORT_A}"
        echo "Port B: ${PORT_B}"

        LOG_LEVEL="debug"
        DRV_LOG_LEVEL="info"
        
        set -e


        python  tests/test_programming.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_ble_common_api.py     --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_rssi.py               --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_connection_update.py  --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_mtu.py                --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_passkey.py            --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_phy_update.py         --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_data_length.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python  tests/test_server_client.py      --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}

    displayName: Jenkins run      
