parameters:
  - name: artifact
    type: string
  - name: py_versions
    type: object
  - name: arch
    type: number

  - name: package_name
    type: string
steps:



  - task: DownloadPipelineArtifact@2
    inputs:
      source: current
      artifact: ${{parameters.artifact}}

  - script: "echo display: dir\ndir\necho display: $(Pipeline.Workspace)\ndir $(Pipeline.Workspace)\n"
    displayName: Display  artifact directories
  
  - script: |
      echo Displaying Python versions in $(Agent.ToolsDirectory)
      echo begin---------------------------
      dir $(Agent.ToolsDirectory)
      echo end-----------------------------
    displayName: Show python versions
    
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '3.x'
  #     addToPath: true 
      # architecture: 'x64'


  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: $(py_version)
  #     addToPath: true 
  #     architecture: "x$(parameters.arch)" 

  # add python version here  
  #pip install
  
  - bash: | 
      pip install -r requirements-dev.txt
      echo "--------" From: $(Pipeline.Workspace)
      dir $(Pipeline.Workspace)
      echo "--------" Install:  $(parameters.package_name)
      echo "--------" Install:  ${{parameters.package_name}}
      echo "--------" Install:  ${parameters.package_name}

      echo "--------" Install:  $(package_name)
      echo "--------" Install:  ${{package_name}}
      echo "--------" Install:  ${package_name}
    
      echo "--------" Install:  $(parameter.package_name)
      echo "--------" Install:  ${{parameter.package_name}}
      echo "--------" Install:  ${parameter.package_name}      
      pip install $(Pipeline.Workspace)/$(parameters.package_name)      --user --force-reinstall
    displayName: Pip install



  - bash: |
        ports=(`nrf-device-lister -p PCA10056`)
        export PORT_A=${ports[0]}
        ports=(`nrf-device-lister -p PCA10040`)
        export PORT_B=${ports[0]}

        LOG_LEVEL="debug"
        DRV_LOG_LEVEL="info"
        
        set -e


        python tests/test_programming.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_ble_common_api.py     --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_rssi.py               --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_connection_update.py  --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_mtu.py                --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_passkey.py            --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_phy_update.py         --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_data_length.py        --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}
        python tests/test_server_client.py      --port-a ${PORT_A} --port-b ${PORT_B} --log-level ${LOG_LEVEL} --driver-log-level ${DRV_LOG_LEVEL}

    displayName: Jenkins run      
